#!/usr/bin/env python3
# GRASS GIS module for creating r.topmodel observed file
#
# AUTHOR:       Huidae Cho
# COPYRIGHT:    (C) 2015 by Huidae Cho
# LICENSE:      GNU Affero General Public License v3

#%module
#% description: Creates an r.topmodel observed streamflow file from USGS data.
#% keywords: hydrology
#% keywords: watershed
#% overwrite: yes
#%end
#%option
#% key: site_no
#% type: string
#% description: USGS site number
#% required: yes
#%end
#%option
#% key: start_date
#% type: string
#% required: yes
#% description: Start date in YYYY-MM-DD format
#%end
#%option
#% key: end_date
#% type: string
#% required: yes
#% description: End date in YYYY-MM-DD format
#%end
#%option G_OPT_F_OUTPUT
#% label: Name for output file
#% required: yes
#%end

import sys
import os

from usgs import fetch_daily_discharge
import grass.script as grass


def main():
    global overwrite

    site_no = options["site_no"]
    start_date = options["start_date"]
    end_date = options["end_date"]
    output = options["output"]
    overwrite = grass.overwrite()

    create_observed_file(site_no, start_date, end_date, output)


def create_observed_file(site_no, start_date, end_date, output):
    global overwrite

    grass.message(_("===== Creating observed file ====="))

    data = fetch_daily_discharge(site_no, start_date, end_date)

    f = open(output, "w")
    f.write("""\
# Generated by %s site_no=%s start_date=%s end_date=%s output=%s
# Q [m^3/d]
""" % (os.path.basename(sys.argv[0]), site_no, start_date, end_date, output))

    for rec in data:
        # ft^3/s => m^3/d
        f.write("%f\n" % (rec["discharge"] * 2446.5755))
    f.close()


if __name__ == "__main__":
    options, flags = grass.parser()
    sys.exit(main())
