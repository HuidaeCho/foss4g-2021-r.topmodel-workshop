#!/usr/bin/env python3
# GRASS GIS module for creating r.topmodel input file
#
# AUTHOR:       Huidae Cho
# COPYRIGHT:    (C) 2015-2021 by Huidae Cho
# LICENSE:      GNU Affero General Public License v3

#%module
#% description: Creates an r.topmodel input file from NCDC data.
#% keywords: hydrology
#% keywords: watershed
#% overwrite: yes
#%end
#%option G_OPT_V_INPUT
#% key: prcp_voronoi
#% label: Name of clipped Voronoi of NCDC PRCP stations
#% required: yes
#%end
#%option G_OPT_V_INPUT
#% key: evap_voronoi
#% label: Name of clipped Voronoi of NCDC EVAP stations
#% required: yes
#%end
#%option
#% key: start_date
#% type: string
#% required: yes
#% description: Start date in YYYY-MM-DD format
#%end
#%option
#% key: end_date
#% type: string
#% required: yes
#% description: End date in YYYY-MM-DD format
#%end
#%option G_OPT_F_OUTPUT
#% label: Name for output file
#% required: yes
#%end

import sys
import os
import calendar

from ncdc import fetch_daily_data
import grass.script as grass


def main():
    global overwrite, mapset

    prcp_voronoi = options["prcp_voronoi"]
    evap_voronoi = options["evap_voronoi"]
    start_date = options["start_date"]
    end_date = options["end_date"]
    output = options["output"]
    overwrite = grass.overwrite()
    mapset = grass.gisenv()["MAPSET"]

    prcp = calculate_weather_data("PRCP", prcp_voronoi, start_date, end_date)
    evap = calculate_weather_data("EVAP", evap_voronoi, start_date, end_date)
    create_input_file(prcp_voronoi, evap_voronoi, start_date, end_date, output, prcp, evap)


def calculate_weather_data(datatypeid, voronoi, start_date, end_date):
    global overwrite

    grass.message(_("===== Calculating %s data =====") % datatypeid)

    start_year = int(start_date[0:4])
    start_month = int(start_date[5:7])
    start_day = int(start_date[8:10])
    end_year = int(end_date[0:4])
    end_month = int(end_date[5:7])
    end_day = int(end_date[8:10])

    first = True
    ret = []

    p = grass.pipe_command("v.report", map=voronoi, option="area", units="percent")
    for line in p.stdout:
        output = line.decode().rstrip("\n").split("|")
        if "id" in output:
            id_idx = output.index("id")
            area_idx = output.index("area")
            continue

        stationid = output[id_idx]
        ratio = float(output[area_idx]) * 0.01

        i = 0

        for year in range(start_year, end_year+1):
            if year == start_year:
                startmonth = start_month
                startday = start_day
            else:
                startmonth = 1
                startday = 1

            if year == end_year:
                endmonth = end_month
                endday = end_day
            else:
                endmonth = 12
                endday = 31

            startdate = "%04d-%02d-%02d" % (year, startmonth, startday)
            enddate = "%04d-%02d-%02d" % (year, endmonth, endday)

            data = fetch_daily_data(datatypeid, stationid, startdate, enddate)

            month = startmonth
            day = startday

            for rec in data:
                y = int(rec["date"][0:4])
                m = int(rec["date"][5:7])
                d = int(rec["date"][8:10])
                v = float(rec["value"])

                for month in range(month, m):
                    ndays = calendar.monthrange(year, month)[1]
                    for day in range(day, ndays+1):
                        if first:
                            ret.append(0.0)
                        i += 1
                    day = 1
                month = m

                for day in range(day, d):
                    if first:
                        ret.append(0.0)
                    i += 1
                day = d

                value = v * ratio

                if first:
                    ret.append(value)
                else:
                    ret[i] += value

                if day < calendar.monthrange(year, month)[1]:
                    day += 1
                else:
                    month += 1
                    day = 1
                i += 1

            if month <= endmonth:
                for month in range(month, endmonth):
                    ndays = calendar.monthrange(year, month)[1]
                    for day in range(day, ndays+1):
                        if first:
                            ret.append(0.0)
                        i += 1
                    day = 1
                month = endmonth

                for day in range(day, endday+1):
                    if first:
                        ret.append(0.0)
                    i += 1

        first = False
    p.wait()
    if p.returncode != 0:
        grass.fatal(_("Cannot calculate %s data") % datatypeid)

    return ret


def create_input_file(prcp_voronoi, evap_voronoi, start_date, end_date, output, prcp, evap):
    data = zip(prcp, evap)

    f = open(output, "w")
    f.write("""\
# Generated by %s prcp_voronoi=%s evap_voronoi=%s start_date=%s end_date=%s output=%s
# dt [h]: Time step
24

################################################################################
# R [m/dt]:  Rainfall
# Ep [m/dt]: Potential evapotranspiration

# R Ep
""" % (os.path.basename(sys.argv[0]), prcp_voronoi, evap_voronoi, start_date, end_date, output))

    for rec in data:
        # 10^-1 mm/d => m/d
        f.write("%f %f\n" % (rec[0] * 0.0001, rec[1] * 0.0001))
    f.close()


def raster_exists(map):
    global mapset
    return grass.find_file(map, element="cell", mapset=mapset)["file"] != ""


if __name__ == "__main__":
    options, flags = grass.parser()
    sys.exit(main())
